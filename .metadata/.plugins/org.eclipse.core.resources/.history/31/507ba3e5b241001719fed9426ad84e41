package bd.daos;

import java.sql.SQLException;
import java.util.Vector;

import bd.BD;
import bd.core.MeuResultSet;
import bd.dbos.Jogo;

public class Jogos implements Cloneable {

	public boolean cadastrado (int codigo) throws Exception
    {
        boolean retorno = false;

        try
        {
            String sql;

            sql = "SELECT * " +
                  "FROM Jogo " +
                  "WHERE ID = ?";

            BD.COMANDO.prepareStatement (sql);

            BD.COMANDO.setInt (1, codigo);

            MeuResultSet resultado = (MeuResultSet)BD.COMANDO.executeQuery ();

            retorno = resultado.first();

            /* // ou, se preferirmos,

            String sql;

            sql = "SELECT COUNT(*) AS QUANTOS " +
                  "FROM LIVROS " +
                  "WHERE CODIGO = ?";

            BD.COMANDO.prepareStatement (sql);

            BD.COMANDO.setInt (1, codigo);

            MeuResultSet resultado = (MeuResultSet)BD.COMANDO.executeQuery ();

            resultado.first();

            retorno = resultado.getInt("QUANTOS") != 0;

            */
        }
        catch (SQLException erro)
        {
            throw new Exception ("Erro ao procurar Jogo");
        }

        return retorno;
    }

    public void incluir (Jogo jogo) throws Exception
    {
        if (jogo==null)
            throw new Exception ("Jogo nao fornecido");

        try
        {
            String sql;
            Vector <Integer> values = new Vector(); 
            
            sql = "INSERT INTO Jogos " +
                  "(DataTermino"; 
            
            /*+
                  "VALUES " +
                  "(?,?,?)";*/
            if(jogo.hasID()){
            	sql+=", ID";
            	values.add(jogo.getID());
            }
            if(jogo.hasUser()){
            	sql+=", USER";
            	values.add(jogo.getUser().getID());
            }
            sql+=") VALUES(";
            sql+="?";
            BD.COMANDO.prepareStatement (sql);
            
            for(int i=0;i<values.size();i++){
            	sql+=",?";
            	BD.COMANDO.setInt (i, values.get(i));
            }
            
            BD.COMANDO.setDate (1, jogo.getDataTermino());
            
            BD.COMANDO.executeUpdate ();
            BD.COMANDO.commit        ();
        }
        catch (SQLException erro)
        {
            throw new Exception ("Erro ao inserir Jogo");
        }
    }

    public void excluir (int id) throws Exception
    {
        if (!cadastrado (id))
            throw new Exception ("Nao cadastrado");

        try
        {
            String sql;

            sql = "DELETE FROM Jogo " +
                  "WHERE ID=?";

            BD.COMANDO.prepareStatement (sql);

            BD.COMANDO.setInt (1, id);

            BD.COMANDO.executeUpdate ();
            BD.COMANDO.commit        ();        }
        catch (SQLException erro)
        {
            throw new Exception ("Erro ao excluir Jogo");
        }
    }

    public void alterar (Jogo jogo) throws Exception
    {
        if (jogo==null)
            throw new Exception ("Jogo nao fornecido");

        if (!cadastrado (jogo.getID()))
            throw new Exception ("Nao cadastrado");

        try
        {
            String sql;

            sql = "UPDATE LIVROS " +
                  "SET ID=? " +
                  "SET DataTermino=? " +
                  "WHERE User_ID = ?";

            BD.COMANDO.prepareStatement (sql);

            BD.COMANDO.setInt (1, jogo.getID());
            BD.COMANDO.setDate  (2, jogo.getDataTermino());
            BD.COMANDO.setInt    (3, jogo.getUser().getID());

            BD.COMANDO.executeUpdate ();
            BD.COMANDO.commit        ();
        }
        catch (SQLException erro)
        {
            throw new Exception ("Erro ao atualizar dados do Jogo");
        }
    }

    public Jogo getLivro (int id) throws Exception
    {
        Jogo livro = null;

        try
        {
            String sql;

            sql = "SELECT * " +
                  "FROM Jogo "+ 
                  "Inner join User ON User.ID=Jogo.User_ID" +
                  "WHERE id = ?";

            BD.COMANDO.prepareStatement (sql);

            BD.COMANDO.setInt (1, codigo);

            MeuResultSet resultado = (MeuResultSet)BD.COMANDO.executeQuery ();

            if (!resultado.first())
                throw new Exception ("Nao cadastrado");

            livro = new Livro (resultado.getInt   ("CODIGO"),
                               resultado.getString("NOME"),
                               resultado.getFloat ("PRECO"));
        }
        catch (SQLException erro)
        {
            throw new Exception ("Erro ao procurar livro");
        }

        return livro;
    }

    public MeuResultSet getLivros () throws Exception
    {
        MeuResultSet resultado = null;

        try
        {
            String sql;

            sql = "SELECT * " +
                  "FROM LIVROS";

            BD.COMANDO.prepareStatement (sql);

            resultado = (MeuResultSet)BD.COMANDO.executeQuery ();
        }
        catch (SQLException erro)
        {
            throw new Exception ("Erro ao recuperar livros");
        }

        return resultado;
    }
    
}
